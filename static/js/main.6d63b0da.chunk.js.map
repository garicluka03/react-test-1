{"version":3,"sources":["algs/App.js","algs/App.style.js","algs/index.js","submiting/Text.js","submiting/StyledText.style.js","submiting/SubmitingArea.js","submiting/SubmitingArea.style.js","submiting/App.js","submiting/App.style.js","submiting/index.js","App.js","Global.styles.js","index.js"],"names":["App","className","st","useState","setChange","localStorage","getItem","setItem","JSON","stringify","currList","parse","changeCheck","num","check","curr","prev","map","item","onClick","splice","i","length","deleteEl","type","value","StyledApp","styled","Algs","st1","Text","StyledText","SubmitingArea","getAlgs2","nameAlg","setNameAlg","realAlg","setRealAlg","typeAlg","setTypeAlg","onSubmit","e","preventDefault","idNum","saveAll","push","submitAll","htmlFor","onChange","target","changeType","name","id","changeName","changeReal","StyledSubmitingArea","Sub","getAlgs1","getAlgs","state","setstate","GlobalStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d63b0da.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nconst App = ({className,st}) => {\r\n    const [change, setChange] = useState(true)\r\n    if (!localStorage.getItem(\"storedalgs\")){\r\n        localStorage.setItem(\"storedalgs\", JSON.stringify([]))\r\n      }\r\n    let currList = JSON.parse(localStorage.getItem(\"storedalgs\"))\r\n    const deleteEl = (num)=>{\r\n        const curr = JSON.parse(localStorage.getItem(\"storedalgs\"))\r\n        curr.splice(num, 1)\r\n        for(let i =0;i<curr.length;i++){\r\n            curr[i][3]=i;\r\n        }\r\n        localStorage.setItem(\"storedalgs\", JSON.stringify(curr))\r\n        setChange((prev)=>{\r\n            if (prev===true){\r\n              return false\r\n      \r\n            }\r\n            else{\r\n              return true\r\n            }\r\n          })\r\n        \r\n    }\r\n    const changeCheck = (num, check)=>{\r\n        const curr = JSON.parse(localStorage.getItem(\"storedalgs\"))\r\n        curr[num][4] = !check\r\n        localStorage.setItem(\"storedalgs\", JSON.stringify(curr))\r\n        setChange((prev)=>{\r\n            if (prev===true){\r\n              return false\r\n      \r\n            }\r\n            else{\r\n              return true\r\n            }\r\n          })\r\n    }\r\n    return (\r\n        <div className={className}>\r\n            {currList.map(item=>{\r\n                return(\r\n                    <div className={\"individual\"} key={item[3]}>\r\n                        <p className={\"desc\"}>type: </p>\r\n                        <p className={\"real\"}>{item[0]}</p>\r\n                        <p className={\"desc\"}>name: </p>\r\n                        <p className={\"real\"}>{item[1]}</p>\r\n                        <p className={\"desc\"}>algorithm: </p>\r\n                        <p className={\"real\"}>{item[2]}</p>\r\n                        <input onClick={()=>deleteEl(item[3])} type=\"button\" value={\"delete\"}></input>\r\n                        {item[4]?<input className={\"green check\"} onClick={()=>changeCheck(item[3],item[4])}  type=\"button\" value={\" \"}></input>:<input className={\"red check\"} onClick={()=>changeCheck(item[3], item[4])}  type=\"button\" value={\" \"}></input>}\r\n                        \r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import styled from \"styled-components\";\r\nimport App from \"./App\";\r\nexport const StyledApp = styled(App)`\r\n    background-color: yellow;\r\n    min-height: 70vh;\r\n    text-align: center;\r\n    .individual>*{\r\n        font-size: 2em;\r\n        display: inline-block;\r\n        margin-right: 10px;\r\n    }\r\n    .green{\r\n        background-color: green;\r\n    }\r\n    .red{\r\n        background-color: red;\r\n    }\r\n    .desc{\r\n        color: darkorange;\r\n    }\r\n    .real{\r\n        font-size: 2.3em;\r\n    }\r\n    .check{\r\n        border-radius:25%;\r\n        width: 50px;\r\n    }\r\n\r\n`","import React from 'react'\r\nimport { StyledApp } from './App.style'\r\nconst Algs = (st) => {\r\n    return (\r\n        <div>\r\n            <StyledApp st1={st}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Algs\r\n","import React from 'react'\r\n\r\nconst Text = ({className}) => {\r\n    return (\r\n        <p className = {className}>Rubik's Cube Algorithms</p>\r\n    )\r\n}\r\n\r\nexport default Text\r\n","import styled from \"styled-components\";\r\nimport Text from \"./Text\";\r\nexport const StyledText = styled(Text)`\r\n    color: green;\r\n    font-size: 8em;\r\n    text-align: center;\r\n    font-weight: 700;\r\n    @media (max-width:1770px){\r\n        font-size: 4em;\r\n    }\r\n`","import React, { useState } from 'react'\r\nimport App from '../algs/App'\r\nimport { useEffect } from 'react'\r\nconst SubmitingArea = ({className, getAlgs2}) => {\r\n    const [nameAlg, setNameAlg]=useState(\"\")\r\n    const [realAlg, setRealAlg]=useState(\"\")\r\n    const [typeAlg, setTypeAlg]=useState(\"oll\")\r\n    const changeType = (e) =>{\r\n        setTypeAlg(e.target.value)\r\n    }\r\n    if (!localStorage.getItem(\"storedalgs\")){\r\n        getAlgs2()\r\n      }\r\n\r\n    const changeName = (e) =>{\r\n        setNameAlg(e.target.value)\r\n    }\r\n    const changeReal = (e) =>{\r\n        setRealAlg(e.target.value)\r\n    }\r\n\r\n    const submitAll = (e) =>{\r\n        if (!localStorage.getItem(\"storedalgs\")){\r\n            localStorage.setItem(\"storedalgs\", JSON.stringify([]))\r\n          }\r\n        e.preventDefault()\r\n        const curr = JSON.parse(localStorage.getItem(\"storedalgs\"))\r\n        let idNum = curr.length\r\n        let saveAll = [typeAlg, nameAlg, realAlg, idNum, false]\r\n        setTypeAlg(\"oll\")\r\n        setNameAlg(\"\")\r\n        setRealAlg(\"\")\r\n        curr.push(saveAll)\r\n        localStorage.setItem(\"storedalgs\", JSON.stringify(curr))\r\n        getAlgs2()\r\n        \r\n\r\n    }\r\n    return (\r\n        <div className={className}>\r\n            <form onSubmit={(e)=>submitAll(e)}>\r\n                <label htmlFor=\"typeAlg\">choose type: </label>\r\n                <select onChange={(e)=>changeType(e)} name='typeAlg' id=\"typeAlg\" value={typeAlg}>\r\n                    <option value=\"OLL\">OLL</option>\r\n                    <option value=\"PLL\">PLL</option>\r\n                    <option value=\"f2L\">F2L</option>\r\n                    <option value=\"other\">other</option>\r\n                </select>\r\n                <label htmlFor=\"name1\">name: </label>\r\n                <input type=\"text\" name=\"name1\" onChange={(e)=>changeName(e)} value={nameAlg}></input>\r\n                <label htmlFor=\"alg\" >type algorithm: </label>\r\n                <input type=\"text\" name=\"alg\" onChange={(e)=>changeReal(e)} value={realAlg}></input>\r\n                <input type=\"submit\" value=\" + \" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubmitingArea\r\n","import styled from \"styled-components\";\r\nimport SubmitingArea from \"./SubmitingArea\";\r\nexport const StyledSubmitingArea = styled(SubmitingArea)`\r\n    *{\r\n        display: inline-block;\r\n        font-size: 1.3em;\r\n    }\r\n    color: green;\r\n    text-align: center;\r\n`","import React from 'react'\r\nimport { StyledText } from './StyledText.style'\r\nimport { StyledSubmitingArea } from './SubmitingArea.style'\r\nconst Sub = ({className, getAlgs1}) => {\r\n    return (\r\n        <div className={className}>\r\n            <StyledText />\r\n            <StyledSubmitingArea getAlgs2={getAlgs1} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sub\r\n","import styled from \"styled-components\";\r\nimport App from \"./App\"\r\nexport const StyledApp = styled(App)`\r\n    \r\n    background-color: darkorange;\r\n    height: 30vh;\r\n    min-height: 300px;\r\n    @media (max-width:600px){\r\n        min-height: 500px;\r\n    }\r\n    `","import React from 'react'\r\nimport { StyledApp } from './App.style'\r\nconst Sub = ({getAlgs}) => {\r\n    return (\r\n        <div>\r\n            <StyledApp getAlgs1={getAlgs}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sub\r\n","import Algs from \"./algs\";\nimport Sub from \"./submiting\";\nimport { useState } from \"react\";\nfunction App() {\n  const [state, setstate] = useState(true)\n  const cFun = ()=>{\n    setstate((prev)=>{\n      if (prev===true){\n        return false\n\n      }\n      else{\n        return true\n      }\n    })\n  }\n  return (\n    <>\n      <Sub getAlgs={cFun}/>\n      <Algs st={state}/>\n      \n    </>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\r\nconst GlobalStyles = createGlobalStyle`\r\n    *{\r\n        font-family: 'Roboto Mono', monospace;\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n`\r\nexport default GlobalStyles","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GlobalStyles from \"./Global.styles\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GlobalStyles />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}